#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
import os
from collections import namedtuple
from queue import Queue
from threading import Thread
from tempfile import NamedTemporaryFile
from eth_account.messages import defunct_hash_message
from eth_account.account import Account
import ipfsapi

# ROS
import rospy
import rosbag
from std_msgs.msg import String, Duration
from std_srvs.srv import Empty

# AIRA
from ipfs_common.msg import Multihash
from ethereum_common.msg import Address
from robonomics_msgs.msg import Demand, Result
from turtlesim_aira.robonomicsMessageUtils import get_signer_account_address
from robonomics_liability.msg import Liability
from robonomics_liability.srv import StartLiability, StartLiabilityRequest
from robonomics_liability.srv import FinishLiability, FinishLiabilityRequest


class WorkerNode:
    liability_queue = Queue()
    in_process = False
    master = Address()
    catalogue = [ 'QmNeMoBUiYjk4VzLtsBe9XAXfpyFawsUd9wEYTQy4tZpEj' ]

    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        self.ipfs = ipfsapi.connect('https://ipfs.infura.io', 5001)

        rospy.Subscriber('/liability/infochan/incoming/demand', Demand, self.on_demand)
        self.result = rospy.Publisher('/liability/infochan/eth/signing/result',
                                      Result, queue_size=128)
        rospy.Subscriber('/liability/ready', Liability, self.on_new_liability)
        rospy.Subscriber('next_liability', Liability, self.subscribe_and_start)
        self.next_liability = rospy.Publisher('next_liability', Liability, queue_size=128)
        rospy.wait_for_service('liability/finish')
        self.liability_proxy = namedtuple('liability_srvs_proxy', ['start', 'finish'])(
                                          rospy.ServiceProxy('liability/start', StartLiability),
                                          rospy.ServiceProxy('liability/finish', FinishLiability))
        rospy.loginfo('Worker node launched.')

    def on_new_liability(self, msg):
        self.liability_queue.put(msg)
        rospy.loginfo("Got new liability %s", msg.address)

    def _process_liability_queue(self):
        while not rospy.is_shutdown() and not self.in_process:
            msg = self.liability_queue.get()
            self.next_liability.publish(msg)

    def subscribe_and_start(self, liability):
        rospy.loginfo('Starting process...')
        prefix = '/liability/eth_' + liability.address.address
        def callback(duration):
            rospy.loginfo('Duration: {} seconds'.format(duration))
            def on_timer(event):
                rospy.loginfo('Liability with master {} complete.'.format(self.master))
                self.liability_proxy.finish(liability.address.address, True)
                self.master = Address()
                self.in_process = False
            rospy.Timer(rospy.Duration(duration.data.secs), on_timer, oneshot=True)
        rospy.Subscriber(prefix + '/duration', Duration, callback)
        self.master = liability.promisee
        rospy.loginfo('New master {}'.format(self.master))
        self.in_process = True
        self.liability_proxy.start(liability.address.address)

    def on_demand(self, demand: Demand):
        sender_account = Address(address=get_signer_account_address(demand))
        rospy.loginfo('Incoming order {} by {}'.format(demand.model.multihash, sender_account))
        rospy.loginfo('Current master {}'.format(self.master))
        if demand.model.multihash in self.catalogue and sender_account == self.master:
            rospy.loginfo('Fetching objective...')
            try:
                self.ipfs.get(demand.objective.multihash)
                rospy.loginfo('Processing...')
                os.system('rosbag play ./' + demand.objective.multihash)
                result_msg = self._make_result(sender_account, demand.objective.multihash)
            except:
                rospy.logwarn('IPFS error. Execution failed.')
                result_msg = self._make_result(sender_account, demand.objective.multihash,
                                               success=False)
            rospy.loginfo('Process complete, reporting.')
            self.result.publish(result_msg)
        else:
            rospy.loginfo('Model not in catalogue or sender is not master, skiping.')

    def _make_result(self, sender_account, objective_hash, success=True):
        with NamedTemporaryFile(delete=False) as tmpfile:
            recorder = rosbag.Bag(tmpfile.name, 'w')
            recorder.write('/id', String(data=str(self.ipfs.id())))
            recorder.write('/objective', String(data=objective_hash))
            recorder.close()

            msg = Result()
            msg.success = True
            msg.liability = Address()
            msg.liability = sender_account
            msg.result = Multihash()

            ipfs_response = self.ipfs.add(tmpfile.name)
            try:
                msg.result.multihash = ipfs_response['Hash']
            except TypeError:
                rospy.logwarn('IPFS add proceeding error: %s', ipfs_response[1]['Message'])
                msg.result.multihash = ipfs_response[0]['Hash']
            rospy.loginfo('Result hash: %s', msg.result.multihash)
            return msg

    def spin(self):
        Thread(target=self._process_liability_queue, daemon=True).start()
        rospy.spin()

if __name__ == '__main__':
    WorkerNode().spin()
